/*
 * Copyright (c) 2020-2024 Key4hep-Project.
 *
 * This file is part of Key4hep.
 * See https://key4hep.github.io/key4hep-doc/ for further info.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef ONNXRuntime_WeaverInterface_h
#define ONNXRuntime_WeaverInterface_h

// From: https://github.com/HEP-FCC/FCCAnalyses/tree/b9b84221837da8868158f5592b48a9af69f0f6e3/addons/ONNXRuntime
// AI generated documentation

#include "ONNXRuntime.h"
#include "ROOT/RVec.hxx"

namespace rv = ROOT::VecOps;

/**
 * @class WeaverInterface
 * @brief Interface for ONNX-based inference models generated by Weaver.
 *
 * This class provides functionality to load ONNX models, process input variables,
 * and run inference for jet falvor tagging. The input variables are preprocessed
 * according to the settings defined in JSON configuration files, and predictions are returned
 * as RVec<float> values.
 */
class WeaverInterface {
public:
  using ConstituentVars = rv::RVec<float>; ///< Alias for a vector of float variables.

  /**
   * @brief Constructor to initialize the WeaverInterface.
   *
   * @param onnx_filename Path to the ONNX model file.
   * @param json_filename Path to the JSON file containing preprocessing parameters.
   * @param vars List of variable names to describe jet constituent observables (e.g. pfcand_isEl).
   */
  explicit WeaverInterface(const std::string& onnx_filename = "", const std::string& json_filename = "",
                           const rv::RVec<std::string>& vars = {});

  /**
   * @brief Runs inference on the input variables for a list of jet constituents.
   *
   * @param constituent_vars A vector of per-constituent variables of a jet.
   * @return A vector of probabilities for different jet flavors.
   */
  rv::RVec<float> run(const rv::RVec<ConstituentVars>& constituent_vars);

private:
  /**
   * @struct PreprocessParams
   * @brief Struct to hold preprocessing parameters for input variables.
   *
   * This struct defines preprocessing steps like normalization, padding,
   * and bounds checking for input variables.
   */
  struct PreprocessParams {
    /**
     * @struct VarInfo
     * @brief Holds preprocessing parameters for a single variable.
     */
    struct VarInfo {
      /**
       * @brief Default constructor.
       */
      VarInfo() {}

      /**
       * @brief Constructor with parameter initialization.
       *
       * @param imedian The median or center value for normalization.
       * @param inorm_factor The scaling factor for normalization.
       * @param ireplace_inf_value The value to replace infinity with.
       * @param ilower_bound The lower bound for variable values.
       * @param iupper_bound The upper bound for variable values.
       * @param ipad The value to use for padding.
       */
      VarInfo(float imedian, float inorm_factor, float ireplace_inf_value, float ilower_bound, float iupper_bound,
              float ipad)
          : center(imedian), norm_factor(inorm_factor), replace_inf_value(ireplace_inf_value),
            lower_bound(ilower_bound), upper_bound(iupper_bound), pad(ipad) {}

      float center{0.};            ///< Center value for normalization.
      float norm_factor{1.};       ///< Scaling factor for normalization.
      float replace_inf_value{0.}; ///< Value to replace infinity with.
      float lower_bound{-5.};      ///< Lower bound for variable values.
      float upper_bound{5.};       ///< Upper bound for variable values.
      float pad{0.};               ///< Value to use for padding.
    };

    std::string name;                                      ///< Name of the preprocessing configuration.
    size_t min_length{0}, max_length{0};                   ///< Minimum and maximum lengths for input vectors.
    std::vector<std::string> var_names;                    ///< List of variable names for preprocessing.
    std::unordered_map<std::string, VarInfo> var_info_map; ///< Map of variable names to VarInfo.

    /**
     * @brief Retrieve preprocessing information for a variable.
     *
     * @param name The name of the variable.
     * @return The VarInfo object for the specified variable.
     */
    VarInfo info(const std::string& name_info) const { return var_info_map.at(name_info); }

    /**
     * @brief Dumps variable names and preprocessing details to the console.
     */
    void dumpVars() const;
  };

  /**
   * @brief Preprocesses input variables by normalizing, padding, and bounding.
   *
   * @param input Input vector of variables.
   * @param center Center value for normalization.
   * @param scale Scaling factor for normalization.
   * @param min_length Minimum length of the output vector (padded if necessary).
   * @param max_length Maximum length of the output vector (truncated if necessary).
   * @param pad_value Value to use for padding.
   * @param replace_inf_value Value to replace infinity in the input.
   * @param min Minimum allowable value.
   * @param max Maximum allowable value.
   * @return A preprocessed vector of variables.
   */
  std::vector<float> center_norm_pad(const rv::RVec<float>& input, float center, float scale, size_t min_length,
                                     size_t max_length, float pad_value = 0, float replace_inf_value = 0, float min = 0,
                                     float max = -1);

  /**
   * @brief Finds the position of a variable in the list of input variable names.
   *
   * @param var_name Name of the variable.
   * @return The position of the variable in the input list.
   */
  size_t variablePos(const std::string& var_name) const;

  std::unique_ptr<ONNXRuntime> onnx_;                               ///< Pointer to the ONNX runtime object.
  std::vector<std::string> variables_names_;                        ///< List of input variable names.
  ONNXRuntime::Tensor<long> input_shapes_;                          ///< Tensor describing input shapes.
  std::vector<unsigned int> input_sizes_;                           ///< List of input sizes for each dimension.
  std::unordered_map<std::string, PreprocessParams> prep_info_map_; ///< Map of preprocessing parameters.
  ONNXRuntime::Tensor<float> data_;                                 ///< Tensor for input data.
};

#endif
